page << %{
Raphael.fn.connection = function (obj1, obj2, line, bg) {
    if (obj1.line && obj1.from && obj1.to) {
        line = obj1;
        obj1 = line.from;
        obj2 = line.to;
    }
    var bb1 = obj1.getBBox(),
        bb2 = obj2.getBBox(),
        p = [{x: bb1.x + bb1.width / 2, y: bb1.y - 1},
        {x: bb1.x + bb1.width / 2, y: bb1.y + bb1.height + 1},
        {x: bb1.x - 1, y: bb1.y + bb1.height / 2},
        {x: bb1.x + bb1.width + 1, y: bb1.y + bb1.height / 2},
        {x: bb2.x + bb2.width / 2, y: bb2.y - 1},
        {x: bb2.x + bb2.width / 2, y: bb2.y + bb2.height + 1},
        {x: bb2.x - 1, y: bb2.y + bb2.height / 2},
        {x: bb2.x + bb2.width + 1, y: bb2.y + bb2.height / 2}],
        d = {}, dis = [];
    for (var i = 0; i < 4; i++) {
        for (var j = 4; j < 8; j++) {
            var dx = Math.abs(p[i].x - p[j].x),
                dy = Math.abs(p[i].y - p[j].y);
            if ((i == j - 4) || (((i != 3 && j != 6) || p[i].x < p[j].x) && ((i != 2 && j != 7) || p[i].x > p[j].x) && ((i != 0 && j != 5) || p[i].y > p[j].y) && ((i != 1 && j != 4) || p[i].y < p[j].y))) {
                dis.push(dx + dy);
                d[dis[dis.length - 1]] = [i, j];
            }
        }
    }
    if (dis.length == 0) {
        var res = [0, 4];
    } else {
        res = d[Math.min.apply(Math, dis)];
    }
    var x1 = p[res[0]].x,
        y1 = p[res[0]].y,
        x4 = p[res[1]].x,
        y4 = p[res[1]].y;
    dx = Math.max(Math.abs(x1 - x4) / 2, 10);
    dy = Math.max(Math.abs(y1 - y4) / 2, 10);
    var x2 = [x1, x1, x1 - dx, x1 + dx][res[0]].toFixed(3),
        y2 = [y1 - dy, y1 + dy, y1, y1][res[0]].toFixed(3),
        x3 = [0, 0, 0, 0, x4, x4, x4 - dx, x4 + dx][res[1]].toFixed(3),
        y3 = [0, 0, 0, 0, y1 + dy, y1 - dy, y4, y4][res[1]].toFixed(3);
    var path = ["M", x1.toFixed(3), y1.toFixed(3), "C", x2, y2, x3, y3, x4.toFixed(3), y4.toFixed(3)].join(",");
    if (line && line.line) {
        line.bg && line.bg.attr({path: path});
        line.line.attr({path: path});
    } else {
        var color = typeof line == "string" ? line : "#000";
        return {
            bg: bg && bg.split && this.path(path).attr({stroke: bg.split("|")[0], fill: "none", "stroke-width": bg.split("|")[1] || 3}),
            line: this.path(path).attr({stroke: color, fill: "none"}),
            from: obj1,
            to: obj2
        };
    }
};

function find_text(array, element){
  index = 0;
  for(var i=0;i<array.length;i++){
    if(array[i] == element){
      return array[i+1];
    }
  }
  return null;
}

function host_selected(id){
  jQuery.ajax('/hosts/'+id+'/info');
    //new Ajax.Request('/hosts/'+id+'/info', {asynchronous:false, evalScripts:true, method:'get',
    //on404:function(request){alert('Not found...? Wrong URL...?')},
    //onFailure:function(request){alert('HTTP Error ' + request.status + '!')}});   
   //
}

function mark_host(id){
  host = find_host_by_id(shapes,id);
  host_marker.attr({cx: host.attr("x")+40, cy: host.attr("y")+40,"fill-opacity": 0.5})
}

function find_host_by_id(shapes,id){
  res = -1;
  for(var i=0;i<shapes.length;i++){
    if(shapes[i].attrs.id == id){
      return shapes[i];
    }
  }
  return -1;
}

var el;
var host_marker;

    Raphael.el.setID = function (id) {
      this.attrs.id = id;
    };


    var dragger = function () {
        this.ox = this.type == "rect" || this.type=="image" ? this.attr("x") : this.attr("cx");
        this.oy = this.type == "rect" || this.type=="image" ? this.attr("y") : this.attr("cy");
        this.animate({"fill-opacity": .2}, 500);
    },
        move = function (dx, dy) {
            text = find_text(shapes,this);
            host_selected(this.attrs.id);
            var att = this.type == "rect" || this.type=="image" ? {x: this.ox + dx, y: this.oy + dy} : {cx: this.ox + dx, cy: this.oy + dy};
            var textatt = {x: att.x+40, y: att.y+90};
            this.attr(att);
            text.attr(textatt);


            this.toFront();
            for (var i = connections.length; i--;) {
                r.connection(connections[i]);
            }
            r.safari();
        },
        onclick = function(el){
          host_selected(el.attrs.id);
        },
        up = function () {
            this.animate({"fill-opacity": 0}, 500);
        },
        r = Raphael("holder", 800, 600),
        connections = [],

        host_marker = r.circle(-100, -100, 55).attr({fill: "red",stroke: "red", "fill-opacity": 1});

        var shapes = [  
        }


x = 0
y = 0
hosts_per_line = 3
@hosts.each do |host|
  image = host.image
  pos_x = 160*x
  pos_y = 160*y+50 

  page << "r.image(\"http://localhost:3000/images/graph/#{image}\",#{pos_x}, #{pos_y}, 80, 80,#{host.id}),"
  page << "r.text(#{pos_x}+40, #{pos_y}+90, \"#{host.address}\",#{host.id}),"


  x = x+1
  if(x%3==0)
    y = y+1
    x = 0
  end 
end

page << %{      
                ];



    
    for (var i = 0, ii = shapes.length; i < ii; i++) {
        shapes[i].attr({fill: "#000", stroke: "#000", "fill-opacity": 0, "stroke-width": 1, cursor: "move"});
        shapes[i].drag(move, dragger, up,null,null,null,onclick);
    }
}

@hosts.each do |host|
  if host.reachable_through_host_id != nil
    page << "connections.push(r.connection(find_host_by_id(shapes,#{host.id}),find_host_by_id(shapes,#{host.reachable_through_host_id}), \"#000\"));"
  end
end
